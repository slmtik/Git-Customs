#!/bin/sh

#pre-commit hook to check the correct ordering for the scripts
#1. check if the number is valid according to the $regexFull pattern
#2. check for duplicates in the index
#3. check for duplicates in the working copy
#4. check for duplicates in the commit history
#Optional: you can uncomment line with 'git fetch --all' to have fresh remote for checking, but it commit will be taking longer to complete
#IMPORTANT: for script renaming this pre-commit should be disabled

scriptFolderpath="Database/DB Scripts/Alter/vCurrent"
remoteBranch="origin/develop"

regexFull="\d{3}\.\d{2}\.\K(\d{4})"
regexPartial="\d{3}\.\d{2}\.\K"

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	localBranch=HEAD
else
	localBranch=$(git hash-object -t tree /dev/null)
fi

exec 1>&2

errorMsg=
newScriptsOrders=()

while IFS= read -r newScript
do
	[[ -z $newScript ]] && exit 0

	newScriptOrder=$(echo "$newScript" | grep -oP $regexFull)

	[[ -z $newScriptOrder ]] && errorMsg="$errorMsg"$'\n'"Invalid script order number found: $newScript" && continue

	if [[ ${newScriptsOrders[@]} =~ $newScriptOrder ]]
	then
		errorMsg="$errorMsg"$'\n'"There is already a script with the same order in the index: $newScriptOrder"
		continue
	else
		newScriptsOrders+=($newScriptOrder)
	fi
	
	while IFS= read -r existingLocalScriptOrder
	do
		if [[ ! -z $existingLocalScriptOrder ]] 
		then 
			errorMsg="$errorMsg"$'\n'"There is already a script with the same order in the working copy: $existingLocalScriptOrder"
			break
		fi
	done <<< $(git ls-tree --name-only -r $localBranch "$scriptFolderpath" | grep -oP "${regexPartial}(${newScriptOrder})")

	# git fetch --all
	while IFS= read -r existingRemoteScriptOrder
	do
		if [[ ! -z $existingRemoteScriptOrder ]] 
		then 
			errorMsg="$errorMsg"$'\n'"There is already a script with the same order in the history: $existingRemoteScriptOrder"
			break
		fi
	done <<< $(git ls-tree --name-only -r "$remoteBranch" "$scriptFolderpath" | grep -oP "${regexPartial}(${newScriptOrder})")

done <<< "$(git diff-index --name-only -r $localBranch "$scriptFolderpath")"

[[ ! -z $errorMsg ]] && echo "$errorMsg" && exit 1

exit 0